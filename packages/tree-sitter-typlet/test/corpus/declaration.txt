============================================
Effect
============================================

effect Option {
  fn none() -> never
}
effect Result<E> {
  fn err(e: E) -> never
}
effect IO {
  fn read(buf: Array<u8>, len: usize)
  fn write(buf: Array<u8>, begin: usize, len: usize)
}

---

(program
  (decl_effect
    (identifier)
    (fn_signature
      (identifier)
      (type (identifier))
    )
  )
  (decl_effect
    (identifier)
    (type_parameters (name (identifier)))
    (fn_signature
      (identifier)
      (fn_param (identifier) (type (identifier)))
      (type (identifier))
    )
  )
  (decl_effect
    (identifier)
    (fn_signature
      (identifier)
      (fn_param (identifier) (type (identifier) (type_parameters (name (identifier)))))
      (fn_param (identifier) (type (identifier)))
    )
    (fn_signature
      (identifier)
      (fn_param (identifier) (type (identifier) (type_parameters (name (identifier)))))
      (fn_param (identifier) (type (identifier)))
      (fn_param (identifier) (type (identifier)))
    )
  ))

============================================
Struct Type
============================================

type Pos2d { x: i32, y: i32 }
type Spanned<T> { inner: T, span: Span }

---

(program
  (decl_struct_type
    (identifier)
    (struct_field (identifier) (type (identifier)))
    (struct_field (identifier) (type (identifier)))
  )
  (decl_struct_type
    (identifier)
    (type_parameters (name (identifier)))
    (struct_field (identifier) (type (identifier)))
    (struct_field (identifier) (type (identifier)))
  ))

============================================
Tuple Type
============================================

type Pos2d(i32, i32)
type Spanned<T>(T, Span)

---

(program
  (decl_tuple_type
    (identifier)
    (type (identifier))
    (type (identifier))
  )
  (decl_tuple_type
    (identifier)
    (type_parameters (name (identifier)))
    (type (identifier))
    (type (identifier))
  ))

============================================
Function
============================================

fn init()
extern fn alert(msg: String)
fn add(lhs: i32, rhs: i32) -> i32 { lhs + rhs }

---

(program
  (decl_fn
    (fn_signature 
      (identifier)
    )
  )
  (decl_fn
    (fn_signature 
      (identifier)
      (fn_param (identifier) (type (identifier)))
    )
  )
  (decl_fn
    (fn_signature
      (identifier)
      (fn_param (identifier) (type (identifier)))
      (fn_param (identifier) (type (identifier)))
      (type (identifier))
    )
    (block
      (binary_operation (name (identifier)) (name (identifier)))
    )
  ))
